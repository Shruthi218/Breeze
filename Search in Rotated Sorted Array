Explanation for Searching in Rotated Sorted Array.

The interesting property of a sorted + rotated array is that when you divide it into two halves, atleast one of the two halves will always be sorted.

Let input array arr = [4,5,6,7,8,9,1,2,3]
number of elements  = 9
mid index = (0+8)/2 = 4

[4,5,6,7,8,9,1,2,3]
         ^
 left   mid  right
as seem right sub-array is not sorted while left sub-array is sorted.

If mid happens to be the point of rotation them both left and right sub-arrays will be sorted.

[6,7,8,9,1,2,3,4,5]
         ^
But in any case one half(sub-array) must be sorted.

We can easily know which half is sorted by comparing start and end element of each half.

Once we find which half is sorted we can see if the key is present in that half - simple comparison with the extremes.

If the key is present in that half we recursively call the function on that half else we recursively call our search on the other half.

We are discarding one half of the array in each call which makes this algorithm O(logN).

class Solution {
    public int search(int[] nums, int target) {
        int low = 0;
        int high = nums.length -1;
        return search(nums, target, low, high);
    }
    
    private int search(int[] nums, int target, int low, int high) {
        int mid = (low + high)/2;
        
        // key not present
        if(low > high) {
            return -1;
        }
        
        // Key is found
        if(nums[mid] == target) {
            return mid;
        }
        
        // if left half is sorted
        if(nums[low] <= nums[mid]) {
            // if key is present in left half.
            if(nums[low] <= target && nums[mid] >=target) {
                return search(nums, target, low, mid-1);
            }else{
                // if key is not present in left half. Search the right half
                return search(nums, target, mid+1, high);
            }
        }
        // if right half is sorted
        else {
            
            // if key is present in right half.
            if(nums[mid] <= target && nums[high] >=target) {
                return search(nums, target, mid+1, high);
            }else{
                // if key is not present in right half. Search the left half
                return search(nums, target, low, mid-1);
            }
        }
    }
}
